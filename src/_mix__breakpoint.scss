// SIMAI Framework
// https://simai.io

// BREAKPOINTS MIXIN
// Color Variable

// Bootstrap | MIT License | https://github.com/twbs/bootstrap

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$breakpoint-array` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md

@function breakpoint-next($name, $breakpoints: $breakpoint-array, $breakpoint-names: map-keys($breakpoints)) {
	$n: index($breakpoint-names, $name);
	@return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
  }
  
  // Minimum breakpoint width. Null for the smallest (first) breakpoint.
  //
  //    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    576px
  @function breakpoint-min($name, $breakpoints: $breakpoint-array) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
  }
  
  // Maximum breakpoint width. Null for the largest (last) breakpoint.
  // The maximum value is calculated as the minimum of the next one less 0.1.
  //
  //    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
  //    767px
  @function breakpoint-max($name, $breakpoints: $breakpoint-array) {
	$next: breakpoint-next($name, $breakpoints);
	@return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
  }
  
 
  // Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
  // Makes the @content apply to the given breakpoint and wider.
  @mixin media-breakpoint-up($name, $breakpoints: $breakpoint-array) {
	$min: breakpoint-min($name, $breakpoints);
	@if $min {
	  @media (min-width: $min) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media of at most the maximum breakpoint width. No query for the largest breakpoint.
  // Makes the @content apply to the given breakpoint and narrower.
  @mixin media-breakpoint-down($name, $breakpoints: $breakpoint-array) {
	$max: breakpoint-max($name, $breakpoints);
	@if $max {
	  @media (max-width: $max) {
		@content;
	  }
	} @else {
	  @content;
	}
  }
  
  // Media that spans multiple breakpoint widths.
  // Makes the @content apply between the min and max breakpoints
  @mixin media-breakpoint-between($lower, $upper, $breakpoints: $breakpoint-array) {
	@include media-breakpoint-up($lower, $breakpoints) {
	  @include media-breakpoint-down($upper, $breakpoints) {
		@content;
	  }
	}
  }
  
  // Media between the breakpoint's minimum and maximum widths.
  // No minimum for the smallest breakpoint, and no maximum for the largest one.
  // Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
  @mixin media-breakpoint-only($name, $breakpoints: $breakpoint-array) {
	@include media-breakpoint-between($name, $name, $breakpoints) {
	  @content;
	}
  }


// SIMAI Framework
// https://simai.io

// BREAKPOINT MIXIN

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "sm:"
@function breakpoint-infix($name, $breakpoints: $breakpoint-array) {
	@return if(breakpoint-min($name, $breakpoints) == null, "", "#{$name}"+\:);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-media(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@mixin breakpoint-media($name, $breakpoints: $breakpoint-array) {
    $min: map-get($breakpoints, $name);
    @if $min != 0 {
        @media (min-width: $min) {
        @content;
        }
    } @else {
        @content;
    }
} 

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-device-media(desktop, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    992px
@mixin breakpoint-device-media($name, $breakpoints: $breakpoint-device-array) {
    $min: map-get($breakpoints, $name);
    @if $min != 0 {
        @media (min-width: $min) {
        @content;
        }
    } @else {
        @content;
    }
} 

@mixin layer-priority($primary,$secondary:'') {
  @if $secondary != '' {
    @layer #{$primary}.#{$secondary} {
      @content;
    }
  } @else {
    @layer $primary {
      @content;
    }
  }
}